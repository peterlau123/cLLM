name: Code Quality

on:
  push:
    branches:
      - 'main'
      - 'master'  # All branches
      - 'develop'
      - 'release/**'
  pull_request:
    branches:
      - 'main'
      - 'master'  # All branches
      - 'develop'
      - 'release/**'
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday

jobs:
  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [clang-tidy, cppcheck]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      - name: Install clang-tidy
        if: matrix.tool == 'clang-tidy'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy

      - name: Install cppcheck
        if: matrix.tool == 'cppcheck'
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck

      - name: Configure
        run: |
          mkdir -p build
          cd build
          conan install .. --output-folder=. --build=missing
          cmake .. \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCLLM_BUILD_TESTS=ON \
            -DCLLM_ENABLE_LOGGING=ON

      - name: Run clang-tidy
        if: matrix.tool == 'clang-tidy'
        run: |
          cd build
          run-clang-tidy -j4 -header-filter='.*' -checks='-*,modernize-*,performance-*,readability-*,bugprone-*,clang-analyzer-*' -quiet

      - name: Run cppcheck
        if: matrix.tool == 'cppcheck'
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem --suppress=unusedFunction --std=c++17 --language=c++ --project=build/compile_commands.json

  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=cLLM
            -Dsonar.sources=source,include
            -Dsonar.tests=test
            -Dsonar.cpp.file.suffixes=cpp,h
            -Dsonar.cpp.coverage.reportPaths=build/coverage.xml
            -Dsonar.cpp.clangtidy.reportPaths=build/clang-tidy-report.txt
            -Dsonar.cpp.cppcheck.reportPaths=build/cppcheck-report.xml 